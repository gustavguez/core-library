export class ArrayUtility {
    // Suggest current timezone hours
    static find(items, id, callback, compareKey) {
        // Check id key
        const key = compareKey ? compareKey : 'id';
        // Check items
        if (items instanceof Array) {
            let found = false;
            // Found it
            items.every((item, index) => {
                found = item[key] === id;
                if (found) {
                    callback(item, index);
                }
                return !found;
            });
        }
    }
    static each(items, callback) {
        // Array
        if (items instanceof Array) {
            items.forEach((item, index) => {
                callback(item, index);
            });
        }
        else if (items && typeof items === 'object') {
            // Object
            for (const index in items) {
                callback(items[index], index);
            }
        }
    }
    static every(items, callback) {
        if (items instanceof Array) {
            items.every((item, index) => callback(item, index));
        }
    }
    static getDisplayKeys(items, idKey, displayKey) {
        const displayKeys = {};
        // Default keys
        idKey = idKey ? idKey : 'id';
        displayKey = displayKey ? displayKey : 'name';
        // Each
        ArrayUtility.each(items, (obj) => {
            displayKeys[obj[idKey]] = obj[displayKey];
        });
        return displayKeys;
    }
    static getSelectedKeys(items) {
        const selected = [];
        // Iterate
        ArrayUtility.each(items, (val, key) => {
            if (val) {
                selected.push(key);
            }
        });
        return selected;
    }
    static filter(items, callback) {
        let result = [];
        if (items instanceof Array) {
            result = items.filter((item, index) => callback(item, index));
        }
        return result;
    }
    static map(items, callback) {
        let result = [];
        if (items instanceof Array) {
            result = items.map((item, index) => callback(item, index));
        }
        return result;
    }
    static sort(items, compareKey) {
        const result = items.sort((itemA, itemB) => {
            if (itemA[compareKey] < itemB[compareKey]) {
                return -1;
            }
            if (itemA[compareKey] > itemB[compareKey]) {
                return 1;
            }
            return 0;
        });
        return result;
    }
    static hasValue(items) {
        return items instanceof Array && items.length > 0;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXkudXRpbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2d1c3Rhdmd1ZXovbmd4LWNvcmUvc3JjL2xpYi91dGlsaXRpZXMvYXJyYXkudXRpbGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sWUFBWTtJQUV4QixpQ0FBaUM7SUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFZLEVBQUUsRUFBTyxFQUFFLFFBQTBDLEVBQUUsVUFBbUI7UUFDakcsZUFBZTtRQUNmLE1BQU0sR0FBRyxHQUFXLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFbkQsY0FBYztRQUNkLElBQUksS0FBSyxZQUFZLEtBQUssRUFBRTtZQUMzQixJQUFJLEtBQUssR0FBWSxLQUFLLENBQUM7WUFFM0IsV0FBVztZQUNYLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFTLEVBQUUsS0FBYSxFQUFFLEVBQUU7Z0JBQ3hDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUV6QixJQUFJLEtBQUssRUFBRTtvQkFDVixRQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUN0QjtnQkFDRCxPQUFPLENBQUMsS0FBSyxDQUFDO1lBQ2YsQ0FBQyxDQUFDLENBQUM7U0FDSDtJQUNGLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQVUsRUFBRSxRQUEwQztRQUNqRSxRQUFRO1FBQ1IsSUFBSSxLQUFLLFlBQVksS0FBSyxFQUFFO1lBQzNCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFTLEVBQUUsS0FBYSxFQUFFLEVBQUU7Z0JBQzFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDdkIsQ0FBQyxDQUFDLENBQUM7U0FDSDthQUFNLElBQUksS0FBSyxJQUFJLE9B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RCxPQUFPLENBQUMsQ0FBQztRQUNWLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxNQUFNLENBQUM7SUFDZixDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFZO1FBQzNCLE9BQU8sS0FBSyxZQUFZLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNuRCxDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQXJyYXlVdGlsaXR5IHtcblxuXHQvLyBTdWdnZXN0IGN1cnJlbnQgdGltZXpvbmUgaG91cnNcblx0c3RhdGljIGZpbmQoaXRlbXM6IGFueVtdLCBpZDogYW55LCBjYWxsYmFjazogKGl0ZW06IGFueSwgaW5kZXg/OiBhbnkpID0+IHZvaWQsIGNvbXBhcmVLZXk/OiBzdHJpbmcpOiB2b2lkIHtcblx0XHQvLyBDaGVjayBpZCBrZXlcblx0XHRjb25zdCBrZXk6IHN0cmluZyA9IGNvbXBhcmVLZXkgPyBjb21wYXJlS2V5IDogJ2lkJztcblxuXHRcdC8vIENoZWNrIGl0ZW1zXG5cdFx0aWYgKGl0ZW1zIGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdGxldCBmb3VuZDogYm9vbGVhbiA9IGZhbHNlO1xuXG5cdFx0XHQvLyBGb3VuZCBpdFxuXHRcdFx0aXRlbXMuZXZlcnkoKGl0ZW06IGFueSwgaW5kZXg6IG51bWJlcikgPT4ge1xuXHRcdFx0XHRmb3VuZCA9IGl0ZW1ba2V5XSA9PT0gaWQ7XG5cblx0XHRcdFx0aWYgKGZvdW5kKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soaXRlbSwgaW5kZXgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAhZm91bmQ7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRzdGF0aWMgZWFjaChpdGVtczogYW55LCBjYWxsYmFjazogKGl0ZW06IGFueSwgaW5kZXg/OiBhbnkpID0+IHZvaWQpOiB2b2lkIHtcblx0XHQvLyBBcnJheVxuXHRcdGlmIChpdGVtcyBpbnN0YW5jZW9mIEFycmF5KSB7XG5cdFx0XHRpdGVtcy5mb3JFYWNoKChpdGVtOiBhbnksIGluZGV4OiBudW1iZXIpID0+IHtcblx0XHRcdFx0Y2FsbGJhY2soaXRlbSwgaW5kZXgpO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIGlmIChpdGVtcyAmJiB0eXBlb2YgaXRlbXMgPT09ICdvYmplY3QnKSB7XG5cdFx0XHQvLyBPYmplY3Rcblx0XHRcdGZvciAoY29uc3QgaW5kZXggaW4gaXRlbXMpIHtcblx0XHRcdFx0Y2FsbGJhY2soaXRlbXNbaW5kZXhdLCBpbmRleCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0c3RhdGljIGV2ZXJ5KGl0ZW1zOiBhbnlbXSwgY2FsbGJhY2s6IChpdGVtOiBhbnksIGluZGV4PzogYW55KSA9PiBib29sZWFuKTogdm9pZCB7XG5cdFx0aWYgKGl0ZW1zIGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdGl0ZW1zLmV2ZXJ5KChpdGVtOiBhbnksIGluZGV4OiBudW1iZXIpID0+IGNhbGxiYWNrKGl0ZW0sIGluZGV4KSk7XG5cdFx0fVxuXHR9XG5cblx0c3RhdGljIGdldERpc3BsYXlLZXlzKGl0ZW1zOiBhbnlbXSwgaWRLZXk/OiBzdHJpbmcsIGRpc3BsYXlLZXk/OiBzdHJpbmcpOiBhbnkge1xuXHRcdGNvbnN0IGRpc3BsYXlLZXlzOiBhbnkgPSB7fTtcblxuXHRcdC8vIERlZmF1bHQga2V5c1xuXHRcdGlkS2V5ID0gaWRLZXkgPyBpZEtleSA6ICdpZCc7XG5cdFx0ZGlzcGxheUtleSA9IGRpc3BsYXlLZXkgPyBkaXNwbGF5S2V5IDogJ25hbWUnO1xuXG5cdFx0Ly8gRWFjaFxuXHRcdEFycmF5VXRpbGl0eS5lYWNoKGl0ZW1zLCAob2JqOiBhbnkpID0+IHtcblx0XHRcdGRpc3BsYXlLZXlzW29ialtpZEtleV1dID0gb2JqW2Rpc3BsYXlLZXldO1xuXHRcdH0pO1xuXHRcdHJldHVybiBkaXNwbGF5S2V5cztcblx0fVxuXG5cdHN0YXRpYyBnZXRTZWxlY3RlZEtleXMoaXRlbXM6IFtdKTogYW55W10ge1xuXHRcdGNvbnN0IHNlbGVjdGVkOiBhbnlbXSA9IFtdO1xuXG5cdFx0Ly8gSXRlcmF0ZVxuXHRcdEFycmF5VXRpbGl0eS5lYWNoKGl0ZW1zLCAodmFsOiBib29sZWFuLCBrZXk6IGFueSkgPT4ge1xuXHRcdFx0aWYgKHZhbCkge1xuXHRcdFx0XHRzZWxlY3RlZC5wdXNoKGtleSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0c3RhdGljIGZpbHRlcihpdGVtczogYW55W10sIGNhbGxiYWNrOiAoaXRlbTogYW55LCBpbmRleD86IGFueSkgPT4gYW55KTogYW55W10ge1xuXHRcdGxldCByZXN1bHQ6IGFueVtdID0gW107XG5cdFx0aWYgKGl0ZW1zIGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdHJlc3VsdCA9IGl0ZW1zLmZpbHRlcigoaXRlbTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBjYWxsYmFjayhpdGVtLCBpbmRleCkpO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIG1hcChpdGVtczogYW55W10sIGNhbGxiYWNrOiAoaXRlbTogYW55LCBpbmRleD86IGFueSkgPT4gYW55KTogYW55W10ge1xuXHRcdGxldCByZXN1bHQ6IGFueVtdID0gW107XG5cdFx0aWYgKGl0ZW1zIGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdHJlc3VsdCA9IGl0ZW1zLm1hcCgoaXRlbTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBjYWxsYmFjayhpdGVtLCBpbmRleCkpO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIHNvcnQoaXRlbXM6IGFueVtdLCBjb21wYXJlS2V5OiBzdHJpbmcpOiBhbnlbXSB7XG5cdFx0Y29uc3QgcmVzdWx0OiBhbnlbXSA9IGl0ZW1zLnNvcnQoKGl0ZW1BOiBhbnksIGl0ZW1COiBhbnkpID0+IHtcblx0XHRcdGlmIChpdGVtQVtjb21wYXJlS2V5XSA8IGl0ZW1CW2NvbXBhcmVLZXldKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmIChpdGVtQVtjb21wYXJlS2V5XSA+IGl0ZW1CW2NvbXBhcmVLZXldKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBoYXNWYWx1ZShpdGVtczogYW55W10pOiBib29sZWFuIHtcblx0XHRyZXR1cm4gaXRlbXMgaW5zdGFuY2VvZiBBcnJheSAmJiBpdGVtcy5sZW5ndGggPiAwO1xuXHR9XG59XG4iXX0=